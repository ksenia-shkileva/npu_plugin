//
// Copyright (C) 2024 Intel Corporation.
// SPDX-License-Identifier: Apache 2.0
//

// RUN: vpux-opt --split-input-file --mlir-print-elementsattrs-with-hex-if-larger 8192 --init-compiler="vpu-arch=%arch% compilation-mode=DefaultHW" --map-bilinear-interpolate-on-dpu %s | FileCheck %s
// REQUIRES: arch-NPU40XX


// CHECK-LABEL: @MapBilinearPytorchHalfPixelInterpolateOnDPU
// CHECK-SAME:    [[INPUT:%.+]]: tensor<1x128x72x72xf16>
func.func @MapBilinearPytorchHalfPixelInterpolateOnDPU(%arg0: tensor<1x128x72x72xf16>) -> tensor<1x128x140x140xf16> {
    %0 = IE.Interpolate(%arg0) {attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <PYTORCH_HALF_PIXEL>, nearest_mode = <FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [0, 1, 2, 3],
        operandSegmentSizes = array<i32: 1, 0, 0, 0>,
        scales_attr = [1.0000100135803223, 1.0000100135803223, 1.9444544315338135, 1.9444544315338135], sizes_attr = [1, 128, 140, 140]
    } : tensor<1x128x72x72xf16> -> tensor<1x128x140x140xf16>

    return %0 : tensor<1x128x140x140xf16>

    // CHECK: [[INTERP:%.+]] = IE.Interpolate([[INPUT]]) {
    // CHECK-SAME:      attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <PYTORCH_HALF_PIXEL>, nearest_mode = <FLOOR>,
    // CHECK-SAME:      antialias = false,
    // CHECK-SAME:      pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
    // CHECK-SAME:      cube_coeff = -7.500000e-01 : f64>,
    // CHECK-SAME:      axes_attr = [0, 1, 2, 3],
    // CHECK-SAME:      operandSegmentSizes = array<i32: 1, 0, 0, 0>,
    // CHECK-SAME:      scales_attr = [1.0000100135803223, 1.0000100135803223, 1.9444544315338135, 1.9444544315338135], sizes_attr = [1, 128, 140, 140]
    // CHECK-SAME:      tensor<1x128x72x72xf16> -> tensor<1x128x140x140xf16>
    // CHECK:           return [[INTERP]] : tensor<1x128x140x140xf16>
}

// -----

// CHECK-LABEL: @MapBilinearAsymmetricInterpolateOnDPU
// CHECK-SAME:    [[INPUT:%.+]]: tensor<1x21x65x65xf16>
func.func @MapBilinearAsymmetricInterpolateOnDPU(%arg0: tensor<1x21x65x65xf16>) -> tensor<1x21x513x513xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SCALES>, coord_mode = <ASYMMETRIC>, nearest_mode = <ROUND_PREFER_FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [0, 1, 2, 3],
        operandSegmentSizes = array<i32: 1, 0, 0, 0>,
        scales_attr = [1.000000e+00, 1.000000e+00, 7.8923077583312988, 7.8923077583312988],
        sizes_attr = [1, 21, 513, 513]
    } : tensor<1x21x65x65xf16> -> tensor<1x21x513x513xf16>

    return %0 : tensor<1x21x513x513xf16>

    // CHECK: [[INTERP:%.+]] = IE.Interpolate([[INPUT]]) {
    // CHECK-SAME:      attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SCALES>, coord_mode = <ASYMMETRIC>, nearest_mode = <ROUND_PREFER_FLOOR>,
    // CHECK-SAME:      antialias = false,
    // CHECK-SAME:      pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
    // CHECK-SAME:      cube_coeff = -7.500000e-01 : f64>,
    // CHECK-SAME:      axes_attr = [0, 1, 2, 3],
    // CHECK-SAME:      operandSegmentSizes = array<i32: 1, 0, 0, 0>,
    // CHECK-SAME:      scales_attr = [1.000000e+00, 1.000000e+00, 7.8923077583312988, 7.8923077583312988],
    // CHECK-SAME:      sizes_attr = [1, 21, 513, 513]
    // CHECK-SAME:      tensor<1x21x65x65xf16> -> tensor<1x21x513x513xf16>
    // CHECK:          return [[INTERP]] : tensor<1x21x513x513xf16>
}

// -----

// CHECK-LABEL: @MapBilinearAlignCornersInterpolateOnDPU
// CHECK-SAME:    [[INPUT:%.+]]: tensor<1x32x180x320xf16>
func.func @MapBilinearAlignCornersInterpolateOnDPU(%arg0: tensor<1x32x180x320xf16>) -> tensor<1x32x92x120xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0],
        pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [2, 3], operandSegmentSizes = array<i32: 1, 0, 0, 0>,
        scales_attr = [0.51111114025115967, 5.000000e-01],
        sizes_attr = [92, 120]} : tensor<1x32x180x320xf16> -> tensor<1x32x92x120xf16>
    return %0 : tensor<1x32x92x120xf16>

    // CHECK: [[INTERP:%.+]] = IE.Interpolate([[INPUT]]) {
    // CHECK-SAME:      attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_FLOOR>,
    // CHECK-SAME:      antialias = false,
    // CHECK-SAME:      pads_begin = [0, 0, 0, 0],
    // CHECK-SAME:      pads_end = [0, 0, 0, 0],
    // CHECK-SAME:      cube_coeff = -7.500000e-01 : f64>,
    // CHECK-SAME:      axes_attr = [2, 3], operandSegmentSizes = array<i32: 1, 0, 0, 0>,
    // CHECK-SAME:      scales_attr = [0.51111114025115967, 5.000000e-01],
    // CHECK-SAME:      sizes_attr = [92, 120]} : tensor<1x32x180x320xf16> -> tensor<1x32x92x120xf16>
    // CHECK:           return [[INTERP]] : tensor<1x32x92x120xf16>
}

// -----

// CHECK-LABEL: @MapBilinearInterpolateOnDPUHalfPixel
// CHECK-SAME:    [[INPUT:%.+]]: tensor<1x256x69x69xf16>
func.func @MapBilinearInterpolateOnDPUHalfPixel(%arg0: tensor<1x256x69x69xf16>) -> tensor<1x256x138x138xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <HALF_PIXEL>, nearest_mode = <FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0], pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [0, 1, 2, 3],
        operandSegmentSizes = array<i32: 1, 0, 0, 0>,
        scales_attr = [1.0000100135803223, 1.0000100135803223, 2.0000100135803223, 2.0000100135803223],
        sizes_attr = [1, 256, 138, 138]
    } : tensor<1x256x69x69xf16> -> tensor<1x256x138x138xf16>

    return %0 : tensor<1x256x138x138xf16>

    // CHECK-NOT:   IE.Interpolate
    // Vertical scale
    // CHECK:       [[VSLICE0:%.+]] = IE.Slice [[INPUT]] [0, 0, 0, 0] [1, 256, 1, 69] : tensor<1x256x69x69xf16> to tensor<1x256x1x69xf16>
    // CHECK:       [[VAVGPOOL:%.+]]  = IE.AvgPool([[VSLICE0]]) {exclude_pads, kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} :  tensor<1x256x1x69xf16> -> tensor<1x256x1x69xf16>
    // CHECK:       [[VSLICE1:%.+]] = IE.Slice [[INPUT]] [0, 0, 0, 0] [1, 256, 2, 69] : tensor<1x256x69x69xf16> to tensor<1x256x2x69xf16>
    // CHECK-DAG:   [[VCST0:%.+]] = const.Declare tensor<256x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]], [[[7.500000e-01], [2.500000e-01]]]]> : tensor<256x1x2x1xf16>
    // CHECK:       [[VGROUPCONV0:%.+]] = IE.GroupConvolution([[VSLICE1]], [[VCST0]]) {dilations = [1, 1], groups = 256 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x256x2x69xf16>, tensor<256x1x2x1xf16> -> tensor<1x256x1x69xf16>
    // CHECK-DAG:   [[VCST1:%.+]] = const.Declare tensor<256x1x2x1xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]], [[[2.500000e-01], [7.500000e-01]]]]> : tensor<256x1x2x1xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[VSLICELAST:%.+]] = IE.Slice [[INPUT]] [0, 0, 68, 0] [1, 256, 1, 69] : tensor<1x256x69x69xf16> to tensor<1x256x1x69xf16>
    // CHECK:       [[VAVGPOOL1:%.+]] = IE.AvgPool([[VSLICELAST]]) {exclude_pads, kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x256x1x69xf16> -> tensor<1x256x1x69xf16>
    // CHECK:       [[VCONCAT:%.+]] = IE.Concat

    // Horizontal scale

    // CHECK:       [[HSLICE0:%.+]] = IE.Slice [[VCONCAT]] [0, 0, 0, 0] [1, 256, 138, 1] : tensor<1x256x138x69xf16> to tensor<1x256x138x1xf16>
    // CHECK:       [[HAVGPOOL0:%.+]] = IE.AvgPool([[HSLICE0]]) {exclude_pads, kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x256x138x1xf16> -> tensor<1x256x138x1xf16>
    // CHECK:       [[HSLICE1:%.+]] =  IE.Slice [[VCONCAT]] [0, 0, 0, 0] [1, 256, 138, 2] : tensor<1x256x138x69xf16> to tensor<1x256x138x2xf16>
    // CHECK-DAG:   [[HCST0:%.+]] = const.Declare tensor<256x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]], [[[7.500000e-01, 2.500000e-01]]]]> : tensor<256x1x1x2xf16>
    // CHECK:       [[HGROUPCONV0:%.+]] = IE.GroupConvolution([[HSLICE1]], [[HCST0]]) {dilations = [1, 1], groups = 256 : i64, pads_begin = [0, 0], pads_end = [0, 0], strides = [1, 1]} : tensor<1x256x138x2xf16>, tensor<256x1x1x2xf16> -> tensor<1x256x138x1xf16>
    // CHECK-DAG:   [[HCST1:%.+]] = const.Declare tensor<256x1x1x2xf16> =
    // CHECK-SAME{LITERAL}:    dense<[[[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]], [[[2.500000e-01, 7.500000e-01]]]]> : tensor<256x1x1x2xf16>

    // More Slice -> Const -> GroupConvolution

    // CHECK:       [[HSLICELAST:%.+]] =  IE.Slice [[VCONCAT]] [0, 0, 0, 68] [1, 256, 138, 1] : tensor<1x256x138x69xf16> to tensor<1x256x138x1xf16>
    // CHECK:       [[HAVGPOOL1:%.+]] = IE.AvgPool([[HSLICELAST]]) {exclude_pads, kernel_size = [1, 1], pads_begin = [0, 0], pads_end = [0, 0], rounding_type = #IE.rounding_type<FLOOR>, strides = [1, 1]} : tensor<1x256x138x1xf16> -> tensor<1x256x138x1xf16>
    // CHECK:       [[HCONCAT:%.+]] = IE.Concat

    // CHECK:        return [[HCONCAT]] : tensor<1x256x138x138xf16>
}


// -----

// CHECK-LABEL: @DoNotMapBilinearInterpolateOnDPUBecauseFitInCMX
// CHECK-SAME:    [[INPUT:%.+]]: tensor<1x32x45x60xf16>
func.func @DoNotMapBilinearInterpolateOnDPUBecauseFitInCMX(%arg0: tensor<1x32x45x60xf16>) -> tensor<1x32x23x30xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_FLOOR>,
        antialias = false,
        pads_begin = [0, 0, 0, 0],
        pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [2, 3],
        operandSegmentSizes = array<i32: 1, 0, 0, 0>,
        scales_attr = [0.51111114025115967, 5.000000e-01],
        sizes_attr = [23, 30]} : tensor<1x32x45x60xf16> -> tensor<1x32x23x30xf16>
    return %0 : tensor<1x32x23x30xf16>

    // CHECK: [[INTERP:%.+]] = IE.Interpolate([[INPUT]]) {
    // CHECK-SAME:      attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_FLOOR>,
    // CHECK-SAME:      antialias = false,
    // CHECK-SAME:      pads_begin = [0, 0, 0, 0],
    // CHECK-SAME:      pads_end = [0, 0, 0, 0],
    // CHECK-SAME:      cube_coeff = -7.500000e-01 : f64>,
    // CHECK-SAME:      axes_attr = [2, 3],
    // CHECK-SAME:      operandSegmentSizes = array<i32: 1, 0, 0, 0>,
    // CHECK-SAME:      scales_attr = [0.51111114025115967, 5.000000e-01],
    // CHECK-SAME:      sizes_attr = [23, 30]} : tensor<1x32x45x60xf16> -> tensor<1x32x23x30xf16>
    // CHECK:           return [[INTERP]] : tensor<1x32x23x30xf16>
}

// -----

// CHECK-LABEL: @DoNotMapBilinearInterpolateAlignCornersFloatScaleOnDPU
// CHECK-SAME:    [[INPUT:%.+]]: tensor<1x21x48x48xf16>
func.func @DoNotMapBilinearInterpolateAlignCornersFloatScaleOnDPU(%arg0: tensor<1x21x48x48xf16>) -> tensor<1x21x384x384xf16> {
    %0 = IE.Interpolate(%arg0) {
        attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_CEIL>,
        antialias = false,
        pads_begin = [0, 0, 0, 0],
        pads_end = [0, 0, 0, 0],
        cube_coeff = -7.500000e-01 : f64>,
        axes_attr = [0, 1, 2, 3],
        operandSegmentSizes = array<i32: 1, 0, 0, 0>,
        scales_attr = [1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00],
        sizes_attr = [1, 21, 384, 384]} : tensor<1x21x48x48xf16> -> tensor<1x21x384x384xf16>
    return %0 : tensor<1x21x384x384xf16>

    // CHECK: [[INTERP:%.+]] = IE.Interpolate([[INPUT]]) {
    // CHECK-SAME:      attr = #IE.Interpolate<mode = <LINEAR_ONNX>, shape_calc_mode = <SIZES>, coord_mode = <ALIGN_CORNERS>, nearest_mode = <ROUND_PREFER_CEIL>,
    // CHECK-SAME:      antialias = false,
    // CHECK-SAME:      pads_begin = [0, 0, 0, 0],
    // CHECK-SAME:      pads_end = [0, 0, 0, 0],
    // CHECK-SAME:      cube_coeff = -7.500000e-01 : f64>,
    // CHECK-SAME:      axes_attr = [0, 1, 2, 3],
    // CHECK-SAME:      operandSegmentSizes = array<i32: 1, 0, 0, 0>,
    // CHECK-SAME:      scales_attr = [1.000000e+00, 1.000000e+00, 1.000000e+00, 1.000000e+00],
    // CHECK-SAME:      sizes_attr = [1, 21, 384, 384]} : tensor<1x21x48x48xf16> -> tensor<1x21x384x384xf16>
    // CHECK:           return [[INTERP]] : tensor<1x21x384x384xf16>
}
